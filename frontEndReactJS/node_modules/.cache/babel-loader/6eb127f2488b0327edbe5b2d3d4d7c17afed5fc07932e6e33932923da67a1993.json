{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\drfBacktest\\\\frontend\\\\src\\\\views\\\\Login.js\";\nimport axios from \"axios\";\nimport { Navigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Login = () => {\n  // const clientId =\n  //   \"140549363583-00rh8vdh92h6lfd4motbkfns8nimqk0n.apps.googleusercontent.com\";\n\n  const responseGoogle = async response => {\n    try {\n      // Response object contains the authorization code\n      const authorizationCode = response.credential;\n\n      // Exchange the authorization code for an access token\n      const {\n        data\n      } = await fetchAccessToken(authorizationCode);\n\n      // Access token should be available in the response\n      const accessToken = data.access_token;\n\n      // Now you can use the access token as needed\n      console.log(\"Access Token:\", accessToken);\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n  const fetchAccessToken = async authorizationCode => {\n    const response = await fetch(\"https://oauth2.googleapis.com/token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      body: new URLSearchParams({\n        code: authorizationCode,\n        client_id: \"140549363583-00rh8vdh92h6lfd4motbkfns8nimqk0n.apps.googleusercontent.com\",\n        client_secret: \"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\",\n        redirect_uri: \"http://localhost:3000\",\n        grant_type: \"authorization_code\"\n      })\n    });\n    return await response.json();\n  };\n  const onSuccess = async res => {\n    console.log(\"user credentials:\", res);\n    const googleResponse = {\n      clientId: res.clientId,\n      userCredential: res.credential\n    };\n    localStorage.setItem(\"credential\", googleResponse.userCredential);\n    const DecodedToken = jwtDecode(googleResponse.userCredential);\n    console.log(DecodedToken);\n    console.log(\"google response: \");\n    console.log(localStorage.getItem(\"credential\"));\n    const user = {\n      grant_type: \"convert_token\",\n      client_id: \"iBzvk3Uq6XssKDLrEhGMqYlsVKMmeHucErk1GjqF\",\n      client_secret: \"vxW4H3xKXwNL6z3bXTheBEsQjgP9upCgglItvvPr5R3CWl8TaJZG1gl9Ae5RgqPbLQ51N8csSVgcWE88TETAqhpRXFwcvEBpAr6dvi34yOOfAnbQc8ha7aa6yOiYMjgn\",\n      backend: \"google-oauth2\",\n      token: res.credential\n    };\n    console.log(user);\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/api-auth/convert-token/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        withCredential: true,\n        body: JSON.stringify(user)\n      });\n      const data = await response.json();\n      console.log(data);\n\n      //  const { data } = await axios.post(\n      //    \"http://localhost:8000/api-auth/convert-token/\",\n      //    user,\n      //    {\n      //      headers: {\n      //        \"Content-Type\": \"application/json\",\n      //        \"Access-Control-Allow-Credentials\": \"*\",\n      //      },\n      //      withCredentials: true,\n      //    },\n      //  );\n      console.log(\"Response:\", data);\n      // axios.defaults.headers.common['Authorization'] = `Bearer ${data['access_token']}`;\n      // localStorage.clear();\n      // localStorage.setItem('access_token', data.access_token);\n      // localStorage.setItem('refresh_token', data.refresh_token);\n      // window.location.href = '/'\n    } catch (error) {\n      console.log(\"error: \", error);\n      console.log(\"error config: \", error.config);\n    }\n  };\n  const onFailure = err => {\n    console.log(\"failed:\", err);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Auth-form-container\",\n    children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      onSuccess: responseGoogle\n      //   onSuccess={(credentialResponse) => {\n      //     console.log(credentialResponse);\n      //   }}\n      //   onError={() => {\n      //     console.log(\"Login Failed\");\n      //   }}\n      ,\n      onError: onFailure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["axios","Navigate","useState","GoogleLogin","jwtDecode","jsxDEV","_jsxDEV","Login","responseGoogle","response","authorizationCode","credential","data","fetchAccessToken","accessToken","access_token","console","log","error","fetch","method","headers","body","URLSearchParams","code","client_id","client_secret","redirect_uri","grant_type","json","onSuccess","res","googleResponse","clientId","userCredential","localStorage","setItem","DecodedToken","getItem","user","backend","token","withCredential","JSON","stringify","config","onFailure","err","className","children","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/drfBacktest/frontend/src/views/Login.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { GoogleLogin } from \"@react-oauth/google\";\r\nimport {jwtDecode} from \"jwt-decode\"\r\n\r\nexport const Login = () => {\r\n  // const clientId =\r\n  //   \"140549363583-00rh8vdh92h6lfd4motbkfns8nimqk0n.apps.googleusercontent.com\";\r\n\r\n\r\n  const responseGoogle = async (response) => {\r\n    try {\r\n      // Response object contains the authorization code\r\n      const authorizationCode = response.credential;\r\n\r\n      // Exchange the authorization code for an access token\r\n      const { data } = await fetchAccessToken(authorizationCode);\r\n\r\n      // Access token should be available in the response\r\n      const accessToken = data.access_token;\r\n\r\n      // Now you can use the access token as needed\r\n      console.log(\"Access Token:\", accessToken);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchAccessToken = async (authorizationCode) => {\r\n    const response = await fetch(\"https://oauth2.googleapis.com/token\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: new URLSearchParams({\r\n        code: authorizationCode,\r\n        client_id:\r\n          \"140549363583-00rh8vdh92h6lfd4motbkfns8nimqk0n.apps.googleusercontent.com\",\r\n        client_secret: \"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\",\r\n        redirect_uri: \"http://localhost:3000\",\r\n        grant_type: \"authorization_code\",\r\n      }),\r\n    });\r\n\r\n    return await response.json();\r\n  };\r\n\r\n  const onSuccess = async (res) => {\r\n    console.log(\"user credentials:\", res);\r\n\r\n    const googleResponse = {\r\n      clientId: res.clientId,\r\n      userCredential: res.credential,\r\n    }\r\n\r\n\r\n    localStorage.setItem(\"credential\", googleResponse.userCredential)\r\n    const DecodedToken = jwtDecode(googleResponse.userCredential)\r\n    console.log(DecodedToken)\r\n\r\n    console.log(\r\n      \"google response: \" )\r\n      console.log(localStorage.getItem(\"credential\"))\r\n    \r\n    const user = {\r\n      grant_type: \"convert_token\",\r\n      client_id: \"iBzvk3Uq6XssKDLrEhGMqYlsVKMmeHucErk1GjqF\",\r\n      client_secret:\r\n        \"vxW4H3xKXwNL6z3bXTheBEsQjgP9upCgglItvvPr5R3CWl8TaJZG1gl9Ae5RgqPbLQ51N8csSVgcWE88TETAqhpRXFwcvEBpAr6dvi34yOOfAnbQc8ha7aa6yOiYMjgn\",\r\n      backend: \"google-oauth2\",\r\n      token: res.credential,\r\n    };\r\n    \r\n    console.log(user)\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"http://127.0.0.1:8000/api-auth/convert-token/\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          withCredential:true,\r\n          body: JSON.stringify(user),\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n\r\n      //  const { data } = await axios.post(\r\n      //    \"http://localhost:8000/api-auth/convert-token/\",\r\n      //    user,\r\n      //    {\r\n      //      headers: {\r\n      //        \"Content-Type\": \"application/json\",\r\n      //        \"Access-Control-Allow-Credentials\": \"*\",\r\n      //      },\r\n      //      withCredentials: true,\r\n      //    },\r\n      //  );\r\n      console.log(\"Response:\", data);\r\n      // axios.defaults.headers.common['Authorization'] = `Bearer ${data['access_token']}`;\r\n      // localStorage.clear();\r\n      // localStorage.setItem('access_token', data.access_token);\r\n      // localStorage.setItem('refresh_token', data.refresh_token);\r\n      // window.location.href = '/'\r\n    } catch (error) {\r\n      console.log(\"error: \", error);\r\n      console.log(\"error config: \", error.config)\r\n    }\r\n  };\r\n\r\n  const onFailure = (err) => {\r\n    console.log(\"failed:\", err);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Auth-form-container\">\r\n      <GoogleLogin\r\n        onSuccess={responseGoogle}\r\n        //   onSuccess={(credentialResponse) => {\r\n        //     console.log(credentialResponse);\r\n        //   }}\r\n        //   onError={() => {\r\n        //     console.log(\"Login Failed\");\r\n        //   }}\r\n        onError={onFailure}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}